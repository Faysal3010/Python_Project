#First *fork* your copy. Then copy-paste your code below this line ðŸ‘‡
#Finally click "Run" to execute the tests
import math
def prime_checker(number:int):
    # for i in range(2,number):
    #     if number%i==0:
    #         print("It's not a prime number.")
    #         return
    # print("It's a prime number.")   

# or

    i=2
    int_sqrt=math.isqrt(number)
    while i<=int_sqrt:
       if number%i==0:
           print("It's not a prime number.")
           return
       i+=1
    print("It's a prime number.")
    return
        
#Write your code above this line ðŸ‘†
    
#Do NOT change any of the code belowðŸ‘‡
number=int(input("Check this number: "))
prime_checker(number)







# Tests
import unittest
from unittest.mock import patch
from io import StringIO

class MyTest(unittest.TestCase):
# Testing Print output
    def test_1(self): 
        with patch('sys.stdout', new = StringIO()) as fake_out: 
            prime_checker(87)
            expected_print = "It's not a prime number.\n"
            self.assertEqual(fake_out.getvalue(), expected_print) 

    def test_2(self): 
        with patch('sys.stdout', new = StringIO()) as fake_out: 
            prime_checker(97)
            expected_print = "It's a prime number.\n"
            self.assertEqual(fake_out.getvalue(), expected_print)

    def test_3(self): 
        with patch('sys.stdout', new = StringIO()) as fake_out: 
            prime_checker(66)
            expected_print = "It's not a prime number.\n"
            self.assertEqual(fake_out.getvalue(), expected_print)

    def test_4(self): 
        with patch('sys.stdout', new = StringIO()) as fake_out: 
            prime_checker(47)
            expected_print = "It's a prime number.\n"
            self.assertEqual(fake_out.getvalue(), expected_print)


print("\n")
print('Running some tests on your code:')
print(".\n.\n.\n.")
unittest.main(verbosity=1, exit=False)
